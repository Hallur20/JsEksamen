Explain differences between Java and JavaScript. You should include both topics related to the fact that Java is a compiled language and JavaScript a scripted language, and general differences in language features.

1. Javascript er et OO scripting sprog der har til formål at lave dynamiske html sider på en web-browser.
2. Java er et programmerings-sprog, der gør at du kan lave programmer det kan køre på din computer/browser, mens javascript kun kører på din browser.
3. Du skal compile java-kode med f.eks commando-prompt for at f.eks kunne se et system.out.println("hello world") i cmd, med med javascript behøver du ikke compile.
4. i javascript behøver man ikke at definerer hvad type en variabel er, eller hvad en metode skal returnere, men det skal man i java.
5. Javascript kræver heller ikke at din kode bliver lavet i klasser, men det skal man i java.
6. Javascript kører kun i én thread, mens i java kan man lave flere (typisk bruges der 4 threads i java fordi computerer nu om dage som regel har 4 kerner)


Explain the two strategies for improving JavaScript: ES6 (es2015) + ES7, versus Typescript. What does it require to use these technologies: In our backend with Node and in (many different) Browsers es2015

1. arrow funktioner - en kortere syntax end den normale javascript-funktion, med arrow funktion behøver du ikke skrive function, og hvis det er samme linje behøver du heller ikke skrive return eller lave krølleparanteser. Man behøver heller ikke binde this i feks react når der bruges arrow funktioner
2. klasser - gør det muligt at ligesom i java at gøre brug af constructors, inheritance, extend osv, komponenter i react gør brug af klasser ved at classen extender React.component.


typescript

1. Typescript er en udvidelse af javascript, og giver mulighed for at angive typer i koden og lave interfaces og moduler.


es2015/typescript bruges på 2 måder:

1. browseren hvor et script tag i en html fil med et source for javascript filen sættes nederst i body tag, hvilket vil gøre at man kan se resultatet på browseren (chrome, firefox, edge osv)
2. Node hvor blandt andre mulighed du kan se resultaterne fra console.log vil printes ud på kommandoprompt vinduet, du skal bare have node.js installeret på computeren.


Explain generally about node.js, and when it “makes sense” and npm, and how it “fits” into the node echo system.

1. Node js er et javascript runtime system der fungerer sammen med side-server applikationer.
2. Uden node.js er det ikke muligt at lave feks et react applikation der kræver feks node modules ved at du skriver npm install.
3. Npm er et software registry i node der indeholder over 600.000 packages lavet af javascript developers.
4. Node kører en javascript fil på samme måde som i en browser, men node har nogle APIs der kan bruges til backup development, http requests osv.
5. Node js giver mest mening ved et real time web application, hvilket er når en klient og server kan udveksle data uden forstyrrelser (states). Det sker med websockets?.

Explain about the Event Loop in Node.js

1. Et event loop er hvad der tillader node.js i at fuldføre ikke-blokerende I/O operationer, hvilket er kode, der ikke blokerer for eksekveringen af koden (promises osv). Dette er rigtig godt for node.js fordi at det er single threaded.


Explain (some) of the purposes with the tools Babel and WebPack, using examples from the exercises

1. Babel bliver brugt til at transpile nyere javascript-kode om til es-2015, sådan at næsten alle browserer kan forstå koden. WebPack er en module bundler. Med webpack kan du gøre brug af nøgleordet "require" der gør sådan at du kan få lavet nogle dependencies der peger på nogle lokale filer du har på din egen computer som feks et image.


Explain the purpose of “use strict” and also Linters, exemplified with ESLint

1. Strict gør sådan at fejle der normalt ikke ville betyde noget i javascript, vil betyde noget sådan at en fejlbesked bliver printet. Feks a = 5 vil give fejl fordi a ikke har nogen declaration (Var a = 5),
 man kan siger det gør koden strengere for fejle. Sådan noget som funktioner er ikke vigtigt at det er i rette rækkefølge fordi at de bliver automatiskt sat op på toppen af koden. ESLint er et godt værktøj for at finde fejle hvori du selv kan definerer reglerne feks 
 kan du lave en regelfil hvori du siger "no-console" hvilket gør at koden ikke skal kunne gøre brug af konsolen.